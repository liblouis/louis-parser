table = { SOI ~ line* ~ EOI }
line = _{ comment | rule_with_comment | empty_line }

comment = { "#" ~ not_newline ~ NEWLINE }
// end_comment = { sp ~ "#" ~ not_newline }
end_comment = { sp ~ not_newline }
not_newline = _{ (!NEWLINE ~ ANY)* }
empty_line = { sp* ~ NEWLINE }

rule_with_comment = { rule ~ end_comment? ~ NEWLINE }

rule = {
    // Miscellaneous Opcodes
    include |
    undefined |
    display |
    multind |

    // Character-Definition Opcodes
    space |
    punctuation |
    digit |
    grouping |
    letter |
    lowercase |
    uppercase |
    litdigit |
    sign |
    math |

    // Braille Indicator Opcodes
    modeletter |
    capsletter |
    begmodeword |
    begcapsword |
    endcapsword |
    capsmodechars |
    begcaps |
    endcaps |
    begcapsphrase |
    endcapsphrase |
    lencapsphrase |
    letsign |
    noletsign |
    noletsignbefore |
    noletsignafter |
    nocontractsign |
    numsign |
    numericnocontchars |
    numericmodechars |
    midendnumericmodechars |

    begmodephrase |
    endmodephrase |
    lenmodephrase |

    // Opcodes for Standing Alone Sequences
    seqdelimiter |
    seqbeforechars |
    seqafterchars |
    seqafterpattern |
    seqafterexpression |

    // Emphasis Opcodes
    class |
    emphclass |
    begemph |
    endemph |
    noemphchars |
    emphletter |
    begemphword |
    endemphword |
    emphmodechars |
    begemphphrase |
    endemphphrase |
    lenemphphrase |

    // Special Symbol Opcodes
    decpoint |
    hyphen |

    // Special Processing Opcodes
    capsnocont |

    // Translation Opcodes
    compbrl |
    comp6 |
    nocont |
    replace |
    always |
    repeated |
    repword |
    rependword |
    largesign |
    word |
    syllable |
    joinword |
    lowword |
    contraction |
    sufword |
    prfword |
    begword |
    begmidword |
    midword |
    midendword |
    endword |
    partword |
    exactdots |
    prepunc |
    postpunc |
    begnum |
    midnum |
    endnum |
    joinnum |

    // Computer braille
    begcomp |
    endcomp |

    // Character-Class Opcodes
    attribute |

    // Swap Opcodes
    swapcd |
    swapdd |
    swapcc |

    // Context and Multipass Opcodes
    context |
    pass2 |
    pass3 |
    pass4 |

    // The correct Opcode
    correct |

    // The match Opcode
    match_rule |
    literal
}

// Miscellaneous Opcodes
include = { "include" ~ sp ~ filename  }
undefined = { "undefined" ~ sp ~ dots }
display = { prefix? ~ "display" ~ sp ~ chars ~ sp ~ dots }
multind = { prefix? ~ "multind" ~ sp ~ dots ~ sp ~ name ~ ( sp ~ name)* }

// Character-Definition Opcodes
space = { prefix? ~ "space" ~ sp ~ chars ~ sp ~ dots }
punctuation = { prefix? ~ "punctuation" ~ sp ~ chars ~ sp ~ dots }
digit = { "digit" ~ sp ~ number ~ sp ~ dots }
grouping = { "grouping" ~ sp ~ name ~ sp ~ chars ~ sp ~ dots ~ "," ~ dots }
letter = { prefix? ~ "letter" ~ sp ~ chars ~ sp ~ dots }
lowercase = { prefix? ~ "lowercase" ~ sp ~ char ~ sp ~ dots }
uppercase = { prefix? ~ "uppercase" ~ sp ~ char ~ sp ~ dots }
litdigit = { "litdigit" ~ sp ~ char ~ sp ~ dots }
sign = { prefix? ~ "sign" ~ sp ~ char ~ sp ~ dots }
math = { prefix? ~ "math" ~ sp ~ char ~ sp ~ dots }

//Braille Indicator Opcodes
modeletter = { prefix? ~ "modeletter" ~ sp ~ name ~ sp ~ dots }
capsletter = { prefix? ~ "capsletter" ~ sp ~ dots }
begmodeword = { prefix? ~ "begmodeword" ~ sp ~ name ~ sp ~ dots }
begcapsword = { prefix? ~ "begcapsword" ~ sp ~ dots  }
endcapsword = { prefix? ~ "endcapsword" ~ sp ~ dots  }
capsmodechars = { "capsmodechars" ~ sp ~ chars }
begcaps = { "begcaps" ~ sp ~ dots}
endcaps = { "endcaps" ~ sp ~ dots}
begcapsphrase = { "begcapsphrase" ~ sp ~ dots}
endcapsphrase = { "endcapsphrase" ~ sp ~ ("before" | "after") ~ sp ~ dots}
lencapsphrase = { "lencapsphrase" ~ sp ~ ASCII_DIGIT }
letsign = { "letsign" ~ sp ~ dots}
noletsign = { "noletsign" ~ sp ~ chars}
noletsignbefore = { "noletsignbefore" ~ sp ~ chars}
noletsignafter = { "noletsignafter" ~ sp ~ chars}
nocontractsign = { "nocontractsign" ~ sp ~ dots}
numsign = { "numsign" ~ sp ~ dots }
numericnocontchars = { "numericnocontchars" ~ sp ~ chars}
numericmodechars = { "numericmodechars" ~ sp ~ chars}
midendnumericmodechars = { "midendnumericmodechars" ~ sp ~ chars}

begmodephrase = { "begmodephrase" ~ sp ~ name ~ sp ~ dots }
endmodephrase = { "endmodephrase" ~ sp ~ name ~ sp ~ ("before" | "after") ~ sp ~ dots }
lenmodephrase = { "lenmodephrase" ~ sp ~ name ~ sp ~ ASCII_DIGIT }

// Opcodes for Standing Alone Sequences
seqdelimiter = { "seqdelimiter" ~ sp ~ chars }
seqbeforechars = { "seqbeforechars" ~ sp ~ chars }
seqafterchars = { "seqafterchars" ~ sp ~ chars }
seqafterpattern = { "seqafterpattern" ~ sp ~ chars }
seqafterexpression = { "seqafterexpression" ~ sp ~ chars }

// Emphasis Opcodes
class = { "class" ~ sp ~ name ~ sp ~ chars }
emphclass = { "emphclass" ~ sp ~ name }
begemph = { "begemph" ~ sp ~ name ~ sp ~ dots }
endemph = { prefix? ~ "endemph" ~ sp ~ name ~ sp ~ dots }
noemphchars = { "noemphchars" ~ sp ~ name ~ sp ~ chars}
emphletter = { "emphletter" ~ sp ~ name ~ sp ~ dots }
begemphword = { "begemphword" ~ sp ~ name ~ sp ~ dots }
endemphword = { "endemphword" ~ sp ~ name ~ sp ~ dots }
emphmodechars = { "emphmodechars" ~ sp ~ name ~ sp ~ chars }
begemphphrase = { "begemphphrase" ~ sp ~ name ~ sp ~ dots }
endemphphrase = { "endemphphrase" ~ sp ~ name ~ sp ~ ("before" | "after") ~ sp ~ dots }
lenemphphrase = { "lenemphphrase" ~ sp ~ name ~ sp ~ ASCII_DIGIT }

// Computer braille
begcomp = { prefix? ~ "begcomp" ~ sp ~ dots }
endcomp = { prefix? ~ "endcomp" ~ sp ~ dots }

// Special Symbol Opcodes
decpoint = { "decpoint" ~ sp ~ chars ~ sp ~ dots }
hyphen = { "hyphen" ~ sp ~ chars ~ sp ~ dots }

// Special Processing Opcodes
capsnocont = { "capsnocont"}

// Translation Opcodes
compbrl = { "compbrl" ~ sp ~ chars }
comp6 = { "comp6" ~ sp ~ chars ~ sp ~ dots}
nocont = { "nocont" ~ sp ~ chars}
replace = { "replace" ~ sp ~ chars ~ (sp ~ chars)? }
always = { prefix? ~ with_class* ~ "always" ~ sp ~ chars ~ sp ~ dots  }
repeated = { prefix? ~ "repeated" ~ sp ~ chars ~ sp ~ dots  }
repword = { "repword" ~ sp ~ chars ~ sp ~ dots}
rependword = { "rependword" ~ sp ~ chars ~ sp ~ dots ~ "," ~ dots}
largesign = { "largesign" ~ sp ~ chars ~ sp ~ dots }
word = { prefix? ~ with_class* ~ "word" ~ sp ~ chars ~ sp ~ dots }
syllable = { "syllable" ~ sp ~ chars ~ sp ~ dots}
joinword = { "joinword" ~ sp ~ chars ~ sp ~ dots }
lowword = { "lowword" ~ sp ~ chars ~ sp ~ dots }
contraction = { "contraction" ~ sp ~ chars }
sufword = { prefix? ~ with_class* ~ "sufword" ~ sp ~ chars ~ sp ~ dots }
prfword = { prefix? ~ with_class* ~ "prfword" ~ sp ~ chars ~ sp ~ dots }
begword = { prefix? ~ with_class* ~ "begword" ~ sp ~ chars ~ sp ~ dots }
begmidword = { prefix? ~ with_class* ~ "begmidword" ~ chars ~ sp ~ dots }
midword = { prefix? ~ with_class* ~ "midword" ~ sp ~ chars ~ sp ~ dots }
midendword = { prefix? ~ with_class* ~ "midendword" ~ sp ~ chars ~ sp ~ dots }
endword = { prefix? ~ "endword" ~ sp ~ chars ~ sp ~ dots }
partword = { "partword" ~ sp ~ chars ~ sp ~ dots }
exactdots = { "exactdots" ~ "@" ~ dots }
prepunc = { prefix? ~ "prepunc" ~ sp ~ chars ~ sp ~ dots }
postpunc = { prefix? ~ "postpunc" ~ sp ~ chars ~ sp ~ dots }
begnum = { "begnum" ~ sp ~ chars ~ sp ~ dots }
midnum = { "midnum" ~ sp ~ chars ~ sp ~ dots }
endnum = { "endnum" ~ sp ~ chars ~ sp ~ dots }
joinnum = { "joinnum" ~ sp ~ chars ~ sp ~ dots }

// Character-Class Opcodes
attribute = { "attribute" ~ sp ~ (name | ASCII_OCT_DIGIT ) ~ sp ~ chars }
// Swap Opcodes
swapcd = { "swapcd" ~ sp ~ name ~ sp ~ dots ~ ("," ~ dots)* }
swapdd = { "swapdd" ~ sp ~ name ~ sp ~ ASCII_NONZERO_DIGIT+ ~ ("," ~ ASCII_NONZERO_DIGIT+)* ~ sp ~ dots ~ ("," ~ dots)* }
swapcc = { "swapcc" ~ sp ~ name ~ sp ~ chars ~ sp ~ chars }
// Context and Multipass Opcodes
context = { prefix? ~ "context" ~ sp ~ multipass_test ~ sp ~ multipass_action }
pass2 = { prefix? ~ "pass2" ~ sp ~ multipass_test ~ sp ~ multipass_action }
pass3 = { prefix? ~ "pass3" ~ sp ~ multipass_test ~ sp ~ multipass_action }
pass4 = { prefix? ~ "pass4" ~ sp ~ multipass_test ~ sp ~ multipass_action }
// The correct Opcode
 // FIXME: probably not all of prefix is valid below
correct = { prefix? ~ "correct" ~ sp ~ multipass_test ~ sp ~ multipass_action }

multipass_test = { chars } // FIXME
multipass_action = { chars } // FIXME

// The match Opcode
match_rule = { "match" ~ pre_pattern ~ chars ~ post_pattern ~ dots }
pre_pattern = { chars } // FIXME
post_pattern = { chars } // FIXME

literal = { "literal" ~ sp ~ chars }

prefix = { ("noback" | "nofor" | "nocross") ~ sp }

with_class = { ( "before" | "after") ~ sp ~ name ~ sp }

dot = { ASCII_DIGIT | 'a'..'f' }
dots = @{ dot+ ~ ("-" ~ dot+)* }

name = @{ ASCII_ALPHANUMERIC+ }
filename = @{ (ASCII_ALPHANUMERIC | "." | "_" | "-" | "/")+ }
number = { hex_char | ASCII_DIGIT } // FIXME: should be  /([0-9]|\p{N})/
chars = @{ char+ }
char = { hex_char | escape_sequence | LETTER | NUMBER | PUNCTUATION | SYMBOL | MARK | "Â­"}

// char = { ASCII_ALPHANUMERIC | "." | "_" | "-" | "/" | "`" | "&" | "$" | "@" | hex_char}

escape_sequence = { "\\\\" | "\\f" | "\\n" | "\\r" | "\\s" | "\\t" | "\\v" | "\\e"}

hex_char = { "\\" ~ "x" ~ ASCII_HEX_DIGIT{4} }
sp = _{ (" " | "\t")+ }
