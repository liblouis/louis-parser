table = {
      SOI ~
      ((comment | rule)? ~ NEWLINE)* ~
      EOI
}

comment = _{ "#" ~ (!NEWLINE ~ ANY)* }

rule = _{
    // Miscellaneous Opcodes
    include |
    undefined |
    display |
    multind |
    // Character-Definition Opcodes
    space |
    punctuation |
    digit |
    uplow |
    grouping |
    letter |
    lowercase |
    uppercase |
    litdigit |
    sign |
    math |
    // Braille Indicator Opcodes
    capsletter |
    begcapsword |
    endcapsword |
    capsmodechars |
    begcaps |
    endcaps |
    begcapsphrase |
    endcapsphrase |
    lencapsphrase |
    letsign |
    noletsign |
    noletsignbefore |
    noletsignafter |
    nocontractsign |
    numsign |
    numericnocontchars |
    numericmodechars |
    midendnumericmodechars |
    // Opcodes for Standing Alone Sequences
    // Emphasis Opcodes
    emphclass |
    begemph |
    endemph |
    noemphchars |
    emphletter |
    begemphword |
    endemphword |
    emphmodechars |
    begemphphrase |
    endemphphrase |
    lenemphphrase |
    // Computer braille
    // Special Symbol Opcodes
    decpoint |
    hyphen |
    // Special Processing Opcodes
    capsnocont |
    // Translation Opcodes
    compbrl |
    comp6 |
    nocont |
    replace |
    always |
    repeated |
    repword |
    rependword |
    largesign |
    word |
    syllable |
    joinword |
    lowword |
    contraction |
    sufword |
    prfword |
    begword |
    begmidword |
    midword |
    midendword |
    endword |
    partword |
    //exactdots |
    prepunc |
    postpunc |
    midnum |
    endnum |
    joinnum |
    // Character-Class Opcodes
    attribute |
    // Swap Opcodes
    swapcd |
    swapdd |
    swapcc |
    // Context and Multipass Opcodes
    context |
    pass2 |
    pass3 |
    pass4 |
    // The correct Opcode
    correct |
    // The match Opcode
    match_rule |
    pre_pattern |
    post_pattern |

    unknown_rule }

// Character-Definition Opcodes
space = { "space" ~ unicode_characters ~ dots_with_zero ~ end_comment?}
punctuation = { "punctuation" ~ unicode_characters ~ dots ~ end_comment?}
digit = { "digit" ~ unicode_characters ~ dots ~ end_comment?}
uplow = { prefix? ~ "uplow" ~ unicode_characters ~ dots ~ ("," ~ dots)? ~ end_comment?}
grouping = { "grouping" ~ ASCII_ALPHA+ ~ unicode_character{2}~ dots ~ "," ~ dots ~ end_comment?}
letter = { "letter" ~ unicode_characters ~ dots ~ end_comment?}
lowercase = { prefix? ~ "lowercase" ~ unicode_character ~ dots ~ end_comment?}
uppercase = { prefix? ~ "uppercase" ~ unicode_character ~ dots ~ end_comment?}
litdigit = { "litdigit" ~ unicode_character ~ dots ~ end_comment?}
sign = { "sign" ~ unicode_character ~ dots_with_zero ~ end_comment?}
math = { "math" ~ unicode_character ~ dots ~ end_comment?}
//Braille Indicator Opcodes
capsletter = { "capsletter" ~ dots }
begcapsword = { "begcapsword" ~ dots }
endcapsword = { "endcapsword" ~ dots }
capsmodechars = { "capsmodechars" ~ unicode_characters }
begcaps = { "begcaps" ~ dots}
endcaps = { "endcaps" ~ dots}
begcapsphrase = { "begcapsphrase" ~ dots}
endcapsphrase = { "endcapsphrase" ~ ("before" | "after") ~ dots}
lencapsphrase = { "lencapsphrase" ~ ASCII_DIGIT }
letsign = { "letsign" ~ dots}
noletsign = { "noletsign" ~ unicode_characters}
noletsignbefore = { "noletsignbefore" ~ unicode_characters}
noletsignafter = { "noletsignafter" ~ unicode_characters}
nocontractsign = { "nocontractsign" ~ dots}
numsign = { "numsign" ~ dots ~ end_comment?}
numericnocontchars = { "numericnocontchars" ~ unicode_characters}
numericmodechars = { "numericmodechars" ~ unicode_characters}
midendnumericmodechars = { "midendnumericmodechars" ~ unicode_characters}
// Opcodes for Standing Alone Sequences
// Emphasis Opcodes
emphclass = { "emphclass" ~ ascii_characters }
begemph = { "begemph" ~ ascii_characters ~ dots }
endemph = { "endemph" ~ ascii_characters ~ dots }
noemphchars = { "begemph" ~ ascii_characters ~ unicode_characters}
emphletter = { "emphletter" ~ ascii_characters ~ dots }
begemphword = { "begemphword" ~ ascii_characters ~ dots }
endemphword = { "endemphword" ~ ascii_characters ~ dots }
emphmodechars = { "emphmodechars" ~ ascii_characters ~ unicode_characters }
begemphphrase = { "begemphphrase" ~ ascii_characters ~ dots }
endemphphrase = { "endemphphrase" ~ ascii_characters ~ ("before" | "after") ~ dots }
lenemphphrase = { "lenemphphrase" ~ ascii_characters ~ ASCII_DIGIT }
// Computer braille
// Special Symbol Opcodes
decpoint = { "decpoint" ~ unicode_characters ~ dots}
hyphen = { "hyphen" ~ unicode_characters ~ dots}
// Special Processing Opcodes
capsnocont = { "capsnocont"}
// Translation Opcodes
compbrl = { "compbrl" ~ unicode_characters }
comp6 = { "comp6" ~ unicode_characters ~ dots}
nocont = { "nocont" ~ unicode_characters}
replace = { "replace" ~ unicode_characters ~ unicode_characters? ~ end_comment?}
always = { prefix? ~ "always" ~ unicode_characters ~ dots ~ end_comment? }
repeated = { "repeated" ~ unicode_characters ~ dots}
repword = { "repword" ~ unicode_characters ~ dots}
rependword = { "rependword" ~ unicode_characters ~ dots ~ "," ~ dots}
largesign = { "largesign" ~ unicode_characters ~ dots }
word = { prefix? ~ "word" ~ unicode_characters ~ dots ~ end_comment?}
syllable = { "syllable" ~ unicode_characters ~ dots}
joinword = { "joinword" ~ unicode_characters ~ dots ~ end_comment?}
lowword = { "lowword" ~ unicode_characters ~ dots ~ end_comment?}
contraction = { "contraction" ~ unicode_characters ~ end_comment?}
sufword = { prefix? ~ "sufword" ~ unicode_characters ~ dots ~ end_comment?}
prfword = { prefix? ~ "prfword" ~ unicode_characters ~ dots ~ end_comment?}
begword = { prefix? ~ "begword" ~ unicode_characters ~ dots ~ end_comment?}
begmidword = { prefix? ~ "begmidword" ~ unicode_characters ~ dots ~ end_comment?}
midword = { prefix? ~ "midword" ~ unicode_characters ~ dots ~ end_comment?}
midendword = { prefix? ~ "midendword" ~ unicode_characters ~ dots ~ end_comment?}
endword = { "endword" ~ unicode_characters ~ dots ~ end_comment?}
partword = { "partword" ~ unicode_characters ~ dots ~ end_comment?}
//exactdots = { "exactdots" ~ "@" ~ dots ~ end_comment?}
prepunc = { prefix? ~ "prepunc" ~ unicode_characters ~ dots ~ end_comment?}
postpunc = { prefix? ~ "postpunc" ~ unicode_characters ~ dots ~ end_comment?}
midnum = { "midnum" ~ unicode_characters ~ dots ~ end_comment?}
endnum = { "endnum" ~ unicode_characters ~ dots ~ end_comment?}
joinnum = { "joinnum" ~ unicode_characters ~ dots ~ end_comment?}

// Character-Class Opcodes
attribute = { "attribute" ~ (ascii_characters | ASCII_OCT_DIGIT ) ~ unicode_characters ~ end_comment?}
// Swap Opcodes
swapcd = { "swapcd" ~ ascii_characters ~ dots ~ ("," ~ dots)* }
swapdd = { "swapdd" ~ ascii_characters ~ ASCII_NONZERO_DIGIT+ ~ ("," ~ ASCII_NONZERO_DIGIT+)* ~ dots ~ ("," ~ dots)* }
swapcc = { "swapcc" ~ ascii_characters ~ unicode_characters ~ unicode_characters }
// Context and Multipass Opcodes
context = { prefix? ~ "context" ~ multipass_test ~ multipass_action ~ end_comment?}
pass2 = { prefix? ~ "pass2" ~ multipass_test ~ multipass_action ~ end_comment?}
pass3 = { prefix? ~ "pass3" ~ multipass_test ~ multipass_action ~ end_comment?}
pass4 = { prefix? ~ "pass4" ~ multipass_test ~ multipass_action ~ end_comment?}
// The correct Opcode
 // FIXME: probably not all of prefix is valid below
correct = { prefix? ~ "correct" ~ multipass_test ~ multipass_action ~ end_comment?}

multipass_test = { unicode_characters } // FIXME
multipass_action = { unicode_characters } // FIXME

// The match Opcode
match_rule = { "match" ~ pre_pattern ~ unicode_characters ~ post_pattern ~ dots }
pre_pattern = { characters } // FIXME
post_pattern = { characters } // FIXME

// Miscellaneous Opcodes
include = { "include" ~ file_characters ~ end_comment? }
undefined = { "undefined" ~ dots}
display = { "display" ~ unicode_characters ~ dots_with_zero ~ end_comment?}
multind = { "multind" ~ dots ~ ascii_characters+ }

unknown_rule = { (!NEWLINE ~ ANY)+ }

prefix = { "noback" | "nofor" | "nocross" }

dot = { ASCII_NONZERO_DIGIT | 'a'..'f' }
dots = @{ "=" | dot ~ (dot | "-")* }

dot_with_zero = { ASCII_DIGIT | 'a'..'f' }
dots_with_zero = @{ dot_with_zero ~ (dot_with_zero | "-")* }

ascii_characters = @{ ASCII_ALPHANUMERIC+ }
file_characters = @{ (ASCII_ALPHANUMERIC | "." | "_" | "-" | "/")+ }
unicode_characters = @{ unicode_character+ }
unicode_character = { hex_char | escape_sequence | LETTER | NUMBER | PUNCTUATION | SYMBOL }

characters = @{ char+ }
char = { ASCII_ALPHANUMERIC | "." | "_" | "-" | "/" | "`" | "&" | "$" | "@" | hex_char}

escape_sequence = { "\\f" | "\\n" | "\\r" | "\\s" | "\\t" | "\\v" | "\\e"}

hex_char = { "\\" ~ "x" ~ ASCII_HEX_DIGIT{4} }

end_comment = _{ (!NEWLINE ~ ANY)+ }

WHITESPACE = _{ " " | "\t" }
